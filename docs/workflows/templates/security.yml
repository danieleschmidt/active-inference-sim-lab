# Comprehensive Security Scanning Pipeline
# Copy to .github/workflows/security.yml and customize as needed

name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, cpp]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          language: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
          
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          pip install -e .[dev]
          
      - name: Build C++ code
        if: matrix.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libeigen3-dev
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install scanning tools
        run: |
          pip install safety pip-audit
          
      - name: Scan Python dependencies
        run: |
          pip-audit --desc --output=json --format=json \
            --vulnerability-service=pypi \
            -o pip-audit-results.json
          safety check --json -o safety-results.json || true
          
      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            pip-audit-results.json
            safety-results.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  semgrep:
    name: Static Analysis (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/cpp
            p/dockerfile
          generate-sarif-file: true
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t active-inference-scan:latest .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'active-inference-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-report:
    name: Generate Security Report
    needs: [codeql, dependency-scan, secrets-scan, semgrep]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          if [[ -f dependency-scan-results/pip-audit-results.json ]]; then
            echo "## Dependency Vulnerabilities" >> security-summary.md
            jq -r '.vulnerabilities[] | "- \(.id): \(.description)"' \
              dependency-scan-results/pip-audit-results.json >> security-summary.md || true
          fi
          
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md